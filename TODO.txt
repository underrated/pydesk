DONE : 
* time management
* threads can wait time in parallel
* can simulate simultaneity
* added random test
* event waiting/emitting
* event callbacks
* nested components
* starting a thread from another thread
* run a thread inside another thread and wait for it to finish
* killing another thread
* write paper TOC
* write paper abstract
* accessing self handle from inside a thread
** flip-flop example
* rise , fall, change events
* The removal of threads is not working, FIX IT
* fork join, join_none, join_any

-------------------------------------------------------------------------------------------
VERIFIED:
* get pointer to self thread
* update component simulation

TESTED:
* temporal expressions
* nb assignments
** dump history to vcd file


IMPLEMENTED:
* get list of pointers to children threads
* kill all children threads
** save history in a list

TODO:
*-------------------------------------
 Mutexes
- Analysis ports and fifos
- Put/Get ports
- protocol phases(for AT)
- generic payload
- error command
- finish simulation command
- enable disable messages and errors by id
- advanced temporal expressions:
** overload '*' operator to multiply events, e.g. 3*my_event returns and event emitted at every 3 occurrences of my_event
** overload '&' and '|' operators to combine events into disjunctive or conjunctive results
*** ev1 & ev2
***ev1 | ev2
** (1,3)*my_event : emitted everytime my_event occurs 1 to 3 times
** (n,Inf)*my_event : emitted for at least n occurrences of my_event
** ev1>>ev2 - ev2 happens at any time after ev1
** ev1>>10 - ev1 happens then 10 tu's pass
** 10>>ev1 - 10 tu's pass then ev1 happens
** ev1>>(5,13) - ev1 happens then between 5 and 13 tu's pass
** sampling events : ev1<<ev2 - ev1 happened between 2 occurrences of ev2
** example:
me.my_ev = ( ((me.ev1&me.ev2) | me.ev3) >> (10,100) >> (3,Inf) * me.ev4 ) << me.clk_rise
- connecting and updating of events and state variables
** every event and state var will have 2 sets: sources and targets
** the 2 sets must not have common elements
** the updating of state variables and events must be done in a certain order
**** what order???
*-------------------------------------
* access control : mutexes, semaphores
* temporal assertions

BIG TASKS:
* signal tracing
** --save history in a list--
** --dump history to vcd file-
* examples:
** --lfsr example--
** FIR filter example
** IIR filter example
** adaptive FIR filter example
** stock market example
** ping pong example


DEFER:

DELEGATE:

COLLECT:
* preemptive evaluation of threads
* preemptive evaluation of event callbacks
* execution of threads in random order(to simulate race conditions)
* execution of event callbacks in random order
* write simulator-related documentation
* sim command that ends the simulation(e.g. yield finish)
* sim command that ends the simulation with an error(e.g. yield sim.error("ERR_ID","Something bad happenedS")

REFERENCE:

INCUBATOR:

TRASH:

--------------------------------------------------------------------------------------- 

IN PROGRESS:

TODO : 
* vplan and verification env and coverage collection
* accessing the handles of other threads from inside a threads
* running multiple threads from inside a thread and joining them in various ways:
** join
** join_any
** join_none
* killing all child threads
* first release
** readme file with basic usage instructions
** examples
* simulating communication
** method ports
** reactive interfaces
* temporal assertions
* non-blocking assignments
* constrained random number generation
* temporal decoupling
* final release:
** instalation setup scripts
** full documentation
** comprehensive code base
*** should include : simulating production software
*** should include : simulating the simulator
** tutorial with simple examples
* access control
** mutexes(locks)
** semaphores
* preemptive evaluation
** allow the user to decide which type odf evaluation to use
* refactor the code


